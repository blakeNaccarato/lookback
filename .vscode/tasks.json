// Calling `pwsh` first leverages my personal $PROFILE to activate `.venv`.
// Alternatively, we could use `.venv/Scripts/python.exe` and change the `args`, but
// this is platform-specific anyways.

{
  "version": "2.0.0",
  "inputs": [
    {
      "id": "board",
      "type": "pickString",
      "description": "board",
      "default": "",
      "options": [
        "Detect bubbles",
        "Get a job",
        "Keep up",
        "Process data",
        "Run experiment",
        "Simulate bubbles",
        "Write dissertation"
      ]
    },
    {
      "id": "card",
      "type": "promptString",
      "description": "card"
    },
    {
      "id": "days",
      "type": "promptString",
      "description": "days",
      "default": "0"
    }
  ],
  "tasks": [
    // * -------------------------------------------------------------------------- * //
    // * Changes below should persist in significant template updates.

    {
      "label": "proj: Generate report",
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "lookback generate-report --days=90"],
      "problemMatcher": []
    },
    {
      "label": "proj: Get comments from task",
      "type": "process",
      "command": "pwsh",
      "args": [
        "-Command",
        "lookback get-comments '${input:board}' '${input:card}' --days=${input:days}"
      ],
      "problemMatcher": []
    },
    {
      "label": "proj: Generate model",
      "type": "process",
      "command": "pwsh",
      "args": [
        "-Command",
        "lookback generate-model 'G:/My Drive/Blake/School/Grad/Time Tracking/Trello/JSON/Latest/c1tDMXSa.json' src/lookback/model.py"
      ],
      "problemMatcher": []
    },
    {
      "label": "proj: Generate schema",
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "lookback generate-schema"],
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * Changes below may be lost in significant template updates.

    // * -------------------------------------------------------------------------- * //
    // * PROJECT SETUP * //
    {
      "label": "setup: Re-answer template questions",
      "type": "process",
      "command": "pwsh",
      "args": [".tools/scripts/Update-Template.ps1"],
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },
    {
      "label": "setup: Bump template",
      "type": "process",
      "command": "pwsh",
      "args": [".tools/scripts/Update-Template.ps1 -Remote -Force"],
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },
    {
      "label": "setup: Setup project",
      "type": "process",
      "command": "pwsh",
      "args": ["setup.ps1"],
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },
    {
      "label": "setup: Update project",
      "type": "process",
      "command": "pwsh",
      "args": ["update.ps1"],
      "icon": { "id": "file-symlink-directory" },
      // "runOptions": {
      //   "runOn": "folderOpen"
      // },
      "problemMatcher": []
    },
    {
      "label": "task: Remove *.rej",
      "type": "process",
      "command": "pwsh",
      "args": [
        "-Command",
        "Get-ChildItem -Recurse -Filter *.rej | Remove-Item"
      ],
      "icon": { "id": "file-symlink-directory" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * PRE-COMMIT * //
    {
      "label": "pre-commit",
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "pre-commit"],
      "icon": { "id": "git-commit" },
      "problemMatcher": []
    },
    {
      "label": "pre-commit",
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "pre-commit run --all-files"],
      "icon": { "id": "git-commit" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * GIT * //
    {
      "label": "git: Rebase back to fork",
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "git rebase -i --fork-point main"],
      "icon": { "id": "git-branch" },
      "problemMatcher": []
    },
    {
      "label": "git: Stage all files",
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "git add -A"],
      "icon": { "id": "git-branch" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * BLACK * //
    {
      "label": "task: black: Ignore magic comma in this file",
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "black -C ${file}"],
      "icon": { "id": "code" },
      "problemMatcher": []
    },
    {
      "label": "task: black: Ignore magic comma in all project files",
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "black -C src tests"],
      "icon": { "id": "code" },
      "problemMatcher": []
    },

    // * -------------------------------------------------------------------------- * //
    // * OTHER TASKS * //
    {
      "label": "task: sphinx-autobuild docs (preview)",
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "sphinx-autobuild docs _site"],
      "icon": { "id": "book" },
      "problemMatcher": []
    },
    {
      "label": "task: snakeviz",
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "snakeviz .prof"],
      "icon": { "id": "graph-line" },
      "problemMatcher": []
    },
    {
      "label": "task: autoflake current file",
      "type": "process",
      "command": "pwsh",
      "args": [
        "-Command",
        "autoflake -i --remove-all-unused-imports --ignore-init-module-imports ${file}"
      ],
      "icon": { "id": "code" },
      "problemMatcher": []
    },
    {
      "label": "task: pytest-cov: Generate coverage",
      "type": "process",
      "command": "pwsh",
      "args": ["-Command", "pytest --cov --cov-report xml"],
      "icon": { "id": "beaker" },
      "problemMatcher": []
    }
  ]
}
